{"ast":null,"code":"import _toConsumableArray from \"/Users/shamopoo/Desktop/github/Notes/reactBook/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/shamopoo/Desktop/github/Notes/reactBook/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shamopoo/Desktop/github/Notes/reactBook/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shamopoo/Desktop/github/Notes/reactBook/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shamopoo/Desktop/github/Notes/reactBook/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shamopoo/Desktop/github/Notes/reactBook/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/shamopoo/Desktop/github/Notes/reactBook/src/Comment/CommentInputContainer.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport CommentInput from './CommentInput';\nimport { addComment } from '../reducers/comments';\n\nvar CommentInputContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CommentInputContainer, _Component);\n\n  function CommentInputContainer() {\n    var _this;\n\n    _classCallCheck(this, CommentInputContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CommentInputContainer).call(this));\n    _this.state = {\n      username: ''\n    };\n    return _this;\n  }\n\n  _createClass(CommentInputContainer, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this._loadUsername();\n    }\n  }, {\n    key: \"_loadUsername\",\n    value: function _loadUsername() {\n      var username = localStorage.getItem('username');\n      username && this.setState({\n        username: username\n      });\n    } // 失去焦点保存名字\n\n  }, {\n    key: \"_saveUsername\",\n    value: function _saveUsername(username) {\n      username && localStorage.setItem('username', username);\n    }\n  }, {\n    key: \"handleSubmitComment\",\n    value: function handleSubmitComment(comment) {\n      console.log(this.props);\n      if (!comment) return;\n      if (!comment.username) return alert('请输入用户名');\n      if (!comment.content) return alert('请输入评论内容');\n      var comments = this.props.comments;\n      var newComments = [].concat(_toConsumableArray(comments), [comment]);\n      localStorage.setItem('comments', JSON.stringify(newComments));\n\n      if (this.props.onSubmit) {\n        this.props.onSubmit(comment);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(CommentInput, {\n        username: this.state.username,\n        onUserNameInputBlur: this._saveUsername.bind(this),\n        onSubmit: this.handleSubmitComment.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return CommentInputContainer;\n}(Component);\n\nCommentInputContainer.propTypes = {\n  comments: PropTypes.array,\n  onSubmit: PropTypes.func\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    comments: state.comments\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onSubmit: function onSubmit(comment) {\n      dispatch(addComment(comment));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentInputContainer);","map":{"version":3,"sources":["/Users/shamopoo/Desktop/github/Notes/reactBook/src/Comment/CommentInputContainer.js"],"names":["React","Component","PropTypes","connect","CommentInput","addComment","CommentInputContainer","state","username","_loadUsername","localStorage","getItem","setState","setItem","comment","console","log","props","alert","content","comments","newComments","JSON","stringify","onSubmit","_saveUsername","bind","handleSubmitComment","propTypes","array","func","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,UAAT,QAA2B,sBAA3B;;IAEMC,qB;;;;;AAMF,mCAAe;AAAA;;AAAA;;AACZ;AACA,UAAKC,KAAL,GAAa;AACVC,MAAAA,QAAQ,EAAE;AADA,KAAb;AAFY;AAKd;;;;yCAEqB;AAClB,WAAKC,aAAL;AACH;;;oCAEgB;AACb,UAAID,QAAQ,GAAGE,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAf;AACAH,MAAAA,QAAQ,IAAI,KAAKI,QAAL,CAAc;AAACJ,QAAAA,QAAQ,EAARA;AAAD,OAAd,CAAZ;AACH,K,CAED;;;;kCACeA,Q,EAAU;AACvBA,MAAAA,QAAQ,IAAIE,YAAY,CAACG,OAAb,CAAqB,UAArB,EAAiCL,QAAjC,CAAZ;AACD;;;wCAEoBM,O,EAAS;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;AACA,UAAI,CAACH,OAAL,EAAc;AACd,UAAI,CAACA,OAAO,CAACN,QAAb,EAAuB,OAAOU,KAAK,CAAC,QAAD,CAAZ;AACvB,UAAI,CAACJ,OAAO,CAACK,OAAb,EAAsB,OAAOD,KAAK,CAAC,SAAD,CAAZ;AAJM,UAKlBE,QALkB,GAKL,KAAKH,KALA,CAKlBG,QALkB;AAM1B,UAAMC,WAAW,gCAAOD,QAAP,IAAiBN,OAAjB,EAAjB;AACAJ,MAAAA,YAAY,CAACG,OAAb,CAAqB,UAArB,EAAiCS,IAAI,CAACC,SAAL,CAAeF,WAAf,CAAjC;;AACA,UAAI,KAAKJ,KAAL,CAAWO,QAAf,EAAyB;AACrB,aAAKP,KAAL,CAAWO,QAAX,CAAoBV,OAApB;AACH;AACJ;;;6BACS;AACR,aACE,oBAAC,YAAD;AACA,QAAA,QAAQ,EAAE,KAAKP,KAAL,CAAWC,QADrB;AAEA,QAAA,mBAAmB,EAAE,KAAKiB,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAFrB;AAGA,QAAA,QAAQ,EAAE,KAAKC,mBAAL,CAAyBD,IAAzB,CAA8B,IAA9B,CAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAMD;;;;EA9C+BzB,S;;AAA9BK,qB,CACKsB,S,GAAY;AACjBR,EAAAA,QAAQ,EAAElB,SAAS,CAAC2B,KADH;AAEjBL,EAAAA,QAAQ,EAAEtB,SAAS,CAAC4B;AAFH,C;;AAiDvB,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACxB,KAAD,EAAW;AACjC,SAAO;AACLa,IAAAA,QAAQ,EAAEb,KAAK,CAACa;AADX,GAAP;AAGD,CAJD;;AAMA,IAAMY,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAc;AACvC,SAAO;AACLT,IAAAA,QAAQ,EAAE,kBAACV,OAAD,EAAa;AACrBmB,MAAAA,QAAQ,CAAC5B,UAAU,CAACS,OAAD,CAAX,CAAR;AACD;AAHI,GAAP;AAKD,CAND;;AAQA,eAAeX,OAAO,CACpB4B,eADoB,EAEpBC,kBAFoB,CAAP,CAGb1B,qBAHa,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport CommentInput from './CommentInput'\nimport { addComment } from '../reducers/comments'\n\nclass CommentInputContainer extends Component {\n    static propTypes = {\n      comments: PropTypes.array,\n      onSubmit: PropTypes.func\n    }\n\n    constructor () {\n       super()\n       this.state = {\n          username: ''\n       }\n    }\n\n    componentWillMount () {\n        this._loadUsername()\n    }\n\n    _loadUsername () {\n        let username = localStorage.getItem('username')\n        username && this.setState({username})\n    }\n\n    // 失去焦点保存名字\n    _saveUsername (username) {\n      username && localStorage.setItem('username', username)\n    }\n\n    handleSubmitComment (comment) {\n      console.log(this.props)\n      if (!comment) return\n      if (!comment.username) return alert('请输入用户名')\n      if (!comment.content) return alert('请输入评论内容')\n        const { comments } = this.props\n        const newComments = [...comments, comment]\n        localStorage.setItem('comments', JSON.stringify(newComments))\n        if (this.props.onSubmit) {\n            this.props.onSubmit(comment)\n        }\n    }\n    render () {\n      return(\n        <CommentInput \n        username={this.state.username}\n        onUserNameInputBlur={this._saveUsername.bind(this)}\n        onSubmit={this.handleSubmitComment.bind(this)} />\n      )\n    }\n}\n\n\nconst mapStateToProps = (state) => {\n  return {\n    comments: state.comments\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSubmit: (comment) => {\n      dispatch(addComment(comment))\n    }\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CommentInputContainer)"]},"metadata":{},"sourceType":"module"}