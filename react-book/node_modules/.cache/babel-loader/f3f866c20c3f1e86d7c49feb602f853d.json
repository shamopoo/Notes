{"ast":null,"code":"import _toConsumableArray from \"/Users/shamopoo/Desktop/github/Notes/reactBook/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/shamopoo/Desktop/github/Notes/reactBook/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shamopoo/Desktop/github/Notes/reactBook/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shamopoo/Desktop/github/Notes/reactBook/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shamopoo/Desktop/github/Notes/reactBook/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shamopoo/Desktop/github/Notes/reactBook/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/shamopoo/Desktop/github/Notes/reactBook/src/Comment/CommentListContainer.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport CommentList from './CommentList';\nimport { initComments as _initComments, deleteComment } from '../reducers/comments';\n\nvar CommentListContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CommentListContainer, _Component);\n\n  function CommentListContainer() {\n    _classCallCheck(this, CommentListContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CommentListContainer).apply(this, arguments));\n  }\n\n  _createClass(CommentListContainer, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this._loadComments();\n    }\n  }, {\n    key: \"_loadComments\",\n    value: function _loadComments() {\n      var comments = localStorage.getItem('comments');\n      comments = comments ? JSON.parse(comments) : [];\n      this.props.initComments(comments);\n    } //删除评论\n\n  }, {\n    key: \"handleDeleteComment\",\n    value: function handleDeleteComment(index) {\n      var comments = this.props.comments;\n      var newComments = [].concat(_toConsumableArray(comments.slice(0, index)), _toConsumableArray(comments.slice(index + 1)));\n      localStorage.setItem('comments', JSON.stringify(newComments));\n\n      if (this.props.onDeleteComment) {\n        this.props.onDeleteComment(index);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(CommentList, {\n        comments: this.props.comments,\n        onDeleteComment: this.handleDeleteComment.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return CommentListContainer;\n}(Component); // 评论列表从 state.comments 中获取\n\n\nCommentListContainer.propTypes = {\n  comments: PropTypes.array,\n  initComments: PropTypes.func,\n  onDeleteComment: PropTypes.func // 初始化评论列表\n\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    comments: state.comments\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    // 提供给 CommentListContainer\n    // 当从 LocalStorage 加载评论列表以后就会通过这个方法\n    // 把评论列表初始化到 state 当中\n    initComments: function initComments(comments) {\n      dispatch(_initComments(comments));\n    },\n    // 删除评论\n    onDeleteComment: function onDeleteComment(commentIndex) {\n      dispatch(deleteComment(commentIndex));\n    }\n  };\n}; // 将 CommentListContainer connect 到 store\n// 会把 comments、initComments、onDeleteComment 传给 CommentListContainer\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentListContainer);","map":{"version":3,"sources":["/Users/shamopoo/Desktop/github/Notes/reactBook/src/Comment/CommentListContainer.js"],"names":["React","Component","PropTypes","connect","CommentList","initComments","deleteComment","CommentListContainer","_loadComments","comments","localStorage","getItem","JSON","parse","props","index","newComments","slice","setItem","stringify","onDeleteComment","handleDeleteComment","bind","propTypes","array","func","mapStateToProps","state","mapDispatchToProps","dispatch","commentIndex"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,YAAY,IAAZA,aAAT,EAAuBC,aAAvB,QAA4C,sBAA5C;;IAGMC,oB;;;;;;;;;;;;;yCAQkB;AAClB,WAAKC,aAAL;AACH;;;oCAEgB;AACb,UAAIC,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAf;AACAF,MAAAA,QAAQ,GAAGA,QAAQ,GAAGG,IAAI,CAACC,KAAL,CAAWJ,QAAX,CAAH,GAA0B,EAA7C;AACA,WAAKK,KAAL,CAAWT,YAAX,CAAwBI,QAAxB;AACH,K,CAED;;;;wCACqBM,K,EAAO;AAAA,UACnBN,QADmB,GACN,KAAKK,KADC,CACnBL,QADmB;AAEzB,UAAIO,WAAW,gCACVP,QAAQ,CAACQ,KAAT,CAAe,CAAf,EAAkBF,KAAlB,CADU,sBAEVN,QAAQ,CAACQ,KAAT,CAAeF,KAAK,GAAG,CAAvB,CAFU,EAAf;AAIAL,MAAAA,YAAY,CAACQ,OAAb,CAAqB,UAArB,EAAiCN,IAAI,CAACO,SAAL,CAAeH,WAAf,CAAjC;;AACA,UAAI,KAAKF,KAAL,CAAWM,eAAf,EAAgC;AAC7B,aAAKN,KAAL,CAAWM,eAAX,CAA2BL,KAA3B;AACF;AACH;;;6BACS;AACN,aACE,oBAAC,WAAD;AACA,QAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWL,QADrB;AAEA,QAAA,eAAe,EAAE,KAAKY,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAKH;;;;EApCgCrB,S,GAwCnC;;;AAxCMM,oB,CACGgB,S,GAAY;AACjBd,EAAAA,QAAQ,EAAEP,SAAS,CAACsB,KADH;AAEjBnB,EAAAA,YAAY,EAAEH,SAAS,CAACuB,IAFP;AAGjBL,EAAAA,eAAe,EAAElB,SAAS,CAACuB,IAHV,CAMnB;;AANmB,C;;AAwCrB,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AACjC,SAAO;AACLlB,IAAAA,QAAQ,EAAEkB,KAAK,CAAClB;AADX,GAAP;AAGD,CAJD;;AAMA,IAAMmB,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAc;AACvC,SAAO;AACL;AACA;AACA;AACAxB,IAAAA,YAAY,EAAE,sBAACI,QAAD,EAAc;AAC1BoB,MAAAA,QAAQ,CAACxB,aAAY,CAACI,QAAD,CAAb,CAAR;AACD,KANI;AAOL;AACAW,IAAAA,eAAe,EAAE,yBAACU,YAAD,EAAkB;AACjCD,MAAAA,QAAQ,CAACvB,aAAa,CAACwB,YAAD,CAAd,CAAR;AACD;AAVI,GAAP;AAYD,CAbD,C,CAeA;AACA;;;AACA,eAAe3B,OAAO,CACpBuB,eADoB,EAEpBE,kBAFoB,CAAP,CAGbrB,oBAHa,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport CommentList from './CommentList'\nimport { initComments, deleteComment } from '../reducers/comments'\n\n\nclass CommentListContainer extends Component {\n  static propTypes = {\n    comments: PropTypes.array,\n    initComments: PropTypes.func,\n    onDeleteComment: PropTypes.func\n  }\n  \n  // 初始化评论列表\n  componentWillMount () {\n      this._loadComments()\n  }\n\n  _loadComments () {\n      let comments = localStorage.getItem('comments')\n      comments = comments ? JSON.parse(comments) : []\n      this.props.initComments(comments)\n  }\n  \n  //删除评论\n  handleDeleteComment (index) {\n     let { comments } = this.props\n     let newComments = [\n       ...comments.slice(0, index),\n       ...comments.slice(index + 1)\n     ]\n     localStorage.setItem('comments', JSON.stringify(newComments))\n     if (this.props.onDeleteComment) {\n        this.props.onDeleteComment(index)\n     }\n  }\n  render () {\n      return(\n        <CommentList\n        comments={this.props.comments}\n        onDeleteComment={this.handleDeleteComment.bind(this)} />\n      )\n  }\n\n}\n\n// 评论列表从 state.comments 中获取\nconst mapStateToProps = (state) => {\n  return {\n    comments: state.comments\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // 提供给 CommentListContainer\n    // 当从 LocalStorage 加载评论列表以后就会通过这个方法\n    // 把评论列表初始化到 state 当中\n    initComments: (comments) => {\n      dispatch(initComments(comments))\n    },\n    // 删除评论\n    onDeleteComment: (commentIndex) => {\n      dispatch(deleteComment(commentIndex))\n    }\n  }\n}\n\n// 将 CommentListContainer connect 到 store\n// 会把 comments、initComments、onDeleteComment 传给 CommentListContainer\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CommentListContainer)"]},"metadata":{},"sourceType":"module"}